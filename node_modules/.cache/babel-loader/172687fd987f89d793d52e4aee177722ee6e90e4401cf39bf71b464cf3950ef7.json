{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surgi\\\\PycharmProjects\\\\NevlohFE\\\\nevlohapp\\\\src\\\\components\\\\ProtectedRoute.js\";\n// components/ProtectedRoute.js\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiredRole = null\n}) => {\n  // Check if user is authenticated\n  const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';\n  const userRole = localStorage.getItem('userRole');\n  const userEmail = localStorage.getItem('userEmail');\n\n  // If not authenticated, redirect to login\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If specific role is required and user doesn't have it, redirect to unauthorized\n  if (requiredRole && userRole !== requiredRole) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Log access for debugging\n  console.log(`Access granted to ${userEmail} with role ${userRole}`);\n\n  // Render the protected component\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","requiredRole","isAuthenticated","localStorage","getItem","userRole","userEmail","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","console","log","_c","$RefreshReg$"],"sources":["C:/Users/surgi/PycharmProjects/NevlohFE/nevlohapp/src/components/ProtectedRoute.js"],"sourcesContent":["// components/ProtectedRoute.js\r\nimport React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst ProtectedRoute = ({ children, requiredRole = null }) => {\r\n  // Check if user is authenticated\r\n  const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';\r\n  const userRole = localStorage.getItem('userRole');\r\n  const userEmail = localStorage.getItem('userEmail');\r\n\r\n  // If not authenticated, redirect to login\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  // If specific role is required and user doesn't have it, redirect to unauthorized\r\n  if (requiredRole && userRole !== requiredRole) {\r\n    return <Navigate to=\"/unauthorized\" replace />;\r\n  }\r\n\r\n  // Log access for debugging\r\n  console.log(`Access granted to ${userEmail} with role ${userRole}`);\r\n\r\n  // Render the protected component\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,YAAY,GAAG;AAAK,CAAC,KAAK;EAC5D;EACA,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,KAAK,MAAM;EAC1E,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,MAAME,SAAS,GAAGH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;EAEnD;EACA,IAAI,CAACF,eAAe,EAAE;IACpB,oBAAOJ,OAAA,CAACF,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,IAAIX,YAAY,IAAII,QAAQ,KAAKJ,YAAY,EAAE;IAC7C,oBAAOH,OAAA,CAACF,QAAQ;MAACW,EAAE,EAAC,eAAe;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChD;;EAEA;EACAC,OAAO,CAACC,GAAG,CAAC,qBAAqBR,SAAS,cAAcD,QAAQ,EAAE,CAAC;;EAEnE;EACA,OAAOL,QAAQ;AACjB,CAAC;AAACe,EAAA,GArBIhB,cAAc;AAuBpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}